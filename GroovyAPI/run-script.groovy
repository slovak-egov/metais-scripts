{  \"body\": \"\ndef reportHeaders = [\n        new Header(\"MetaIS kód\", Header.Type.STRING),\n        new Header(\"Názov služby\", Header.Type.STRING),\n        new Header(\"Popis služby\", Header.Type.STRING),\n        new Header(\"Typ služby\", Header.Type.STRING),\n        new Header(\"URL služby (ak sa jedná o externú službu)\", Header.Type.STRING),\n        new Header(\"URL popisu služby\", Header.Type.STRING),\n        new Header(\"Platnosť služby od\", Header.Type.DATE),\n        new Header(\"Platnosť služby do\", Header.Type.DATE),\n        new Header(\"Kategória služby\", Header.Type.STRING),\n        new Header(\"Názov dokumentu (formuláru)\", Header.Type.STRING),\n        new Header(\"Popis dokumentu (formuláru)\", Header.Type.STRING),\n        new Header(\"Identifikátor formuláru\", Header.Type.STRING),\n        new Header(\"Typ dokumentu\", Header.Type.STRING),\n        new Header(\"Prílohy\", Header.Type.BOOLEAN),\n        new Header(\"Typ prílohy\", Header.Type.STRING),\n        new Header(\"Vyžadovaný KEP\", Header.Type.BOOLEAN),\n        new Header(\"Typ poplatku\", Header.Type.STRING),\n        new Header(\"Kód platby (ID služby v IS PEP)\", Header.Type.STRING),\n        new Header(\"Životná situácia kategória\", Header.Type.STRING),\n        new Header(\"Životná situácia podkategória\", Header.Type.STRING),\n        new Header(\"IČO inštitúcie (IČO alebo IČO_suffix)\", Header.Type.STRING),\n        new Header(\"Stav publikovania na UPVS\", Header.Type.STRING),\n]\n\ndef ksTypeEnums = EnumsRepo.enumTypeMap(\"TYP_KS\")\ndef paymentTypeEnums = EnumsRepo.enumTypeMap(\"LV_PAYMENT_TYPE\")\ndef publStateEnums = EnumsRepo.enumTypeMap(\"STAV_PUBLIKOVANIA_SLUZBY\")\ndef edeskMimeTypeEnums = EnumsRepo.enumTypeMap(\"EDESK_MIME_TYPE\")\n\ndef qi_ks = qi(\"ks\")\ndef qi_form = qi(\"form\")\ndef qi_zs = qi(\"zs\")\ndef qi_zsgroup = qi(\"zsgroup\")\ndef qi_po = qi(\"po\")\n\ndef qi_rel_riesi = qi(\"riesi\")\ndef qi_rel_zoskupuje = qi(\"zoskupuje\")\ndef qi_rel_patri = qi(\"patri\")\ndef qi_rel_gestor = qi(\"gestor\")\n\ndef type_KS = type(\"KS\")\ndef type_Formular = type(\"Formular\")\ndef type_ZS = type(\"ZS\")\ndef type_OkruhZS = type(\"OkruhZS\")\ndef type_PO = type(\"PO\")\n\ndef type_Formular_riesi_KS = type(\"Formular_riesi_KS\")\ndef type_ZS_zoskupuje_KS = type(\"ZS_zoskupuje_KS\")\ndef type_ZS_patri_OkruhZS = type(\"ZS_patri_OkruhZS\")\ndef type_PO_je_gestor_KS = type(\"PO_je_gestor_KS\")\n\n// def dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\")\ndef dateFormat = new SimpleDateFormat(\"dd.MM.yyyy\")\ndef formatDate = { Long millis ->\n    return millis != null ? dateFormat.format(new Date(millis)) : null\n}\n\ndef parseDateToMillis = { String date ->\n    return dateFormat.parse(date).time\n}\n\n// paging\ndef page = (report.page ?: 1) - 1\ndef perPage = report.perPage ?: 10\n\n// params\n// def paramCode = report.parameters?.code as String\ndef paramCode = \"ks_380993\"\ndef paramDateFrom = report.parameters?.dateFrom as String\ndef paramDateTo = report.parameters?.dateTo as String\ndef paramIco = report.parameters?.ico as String\ndef paramState = report.parameters?.state as Map\n\ndef codeFilter = new EmptyExpression();\nif (paramCode && !paramCode.blank) {\n    codeFilter = qi_ks.prop(\"Gen_Profil_kod_metais\").filter(unaccentedStringContains(paramCode))\n}\n\ndef dateFromFilter = new EmptyExpression();\nif (paramDateFrom && !paramDateFrom.blank) {\n    dateFromFilter = qi_ks.prop(\"KS_Profil_UPVS_od\").filter(geq(parseDateToMillis(paramDateFrom)))\n}\n\ndef dateToFilter = new EmptyExpression();\nif (paramDateTo && !paramDateTo.blank) {\n    dateToFilter = qi_ks.prop(\"KS_Profil_UPVS_do\").filter(leq(parseDateToMillis(paramDateTo)))\n}\n\ndef icoFilter = new EmptyExpression();\nif (paramIco && !paramIco.blank) {\n    icoFilter = qi_po.prop(\"EA_Profil_PO_ico\").filter(eq(paramIco))\n}\n\ndef stateFilter = new EmptyExpression();\nif (paramState && paramState.code) {\n    stateFilter = qi_ks.prop(\"KS_Profil_UPVS_stav_publikovania\").filter(eq(paramState.code))\n}\n\ndef query = match(path().node(qi_ks, type_KS))\n        .where(and(\n                not(qi_ks.filter(state(StateEnum.INVALIDATED))),\n                codeFilter,\n                dateFromFilter,\n                dateToFilter,\n                stateFilter\n        ))\n\n        .match(path().node(qi_ks).rel(qi_rel_riesi, RelationshipDirection.IN, type_Formular_riesi_KS).node(qi_form, type_Formular))\n        .optional()\n        .where(and(not(qi_rel_riesi.filter(state(StateEnum.INVALIDATED))), not(qi_form.filter(state(StateEnum.INVALIDATED)))))\n\n        .match(path().node(qi_zs, type_ZS).rel(qi_rel_zoskupuje, RelationshipDirection.OUT, type_ZS_zoskupuje_KS).node(qi_ks))\n        .where(and(not(qi_rel_zoskupuje.filter(state(StateEnum.INVALIDATED))), not(qi_zs.filter(state(StateEnum.INVALIDATED)))))\n\n        .match(path().node(qi_zs).rel(qi_rel_patri, RelationshipDirection.OUT, type_ZS_patri_OkruhZS).node(qi_zsgroup, type_OkruhZS))\n        .where(and(not(qi_rel_patri.filter(state(StateEnum.INVALIDATED))), not(qi_zsgroup.filter(state(StateEnum.INVALIDATED)))))\n\n        .match(path().node(qi_ks).rel(qi_rel_gestor, RelationshipDirection.IN, type_PO_je_gestor_KS).node(qi_po, type_PO))\n        .where(and(\n                not(qi_rel_gestor.filter(state(StateEnum.INVALIDATED))),\n                not(qi_po.filter(state(StateEnum.INVALIDATED))),\n                icoFilter\n        ))\n\ndef returnDef = query.returns(\n        prop(\"code\", qi_ks.prop(\"Gen_Profil_kod_metais\")),\n        prop(\"name\", qi_ks.prop(\"Gen_Profil_nazov\")),\n        prop(\"description\", qi_ks.prop(\"Gen_Profil_popis\")),\n        prop(\"ksType\", qi_ks.prop(\"EA_Profil_KS_typ_ks\")),\n        prop(\"url\", qi_ks.prop(\"KS_Profil_UPVS_url\")),\n        prop(\"urlInfo\", qi_ks.prop(\"KS_Profil_UPVS_url_info\")),\n        prop(\"validFrom\", qi_ks.prop(\"KS_Profil_UPVS_od\")),\n        prop(\"validTo\", qi_ks.prop(\"KS_Profil_UPVS_do\")),\n        prop(\"requiresZep\", qi_rel_riesi.prop(\"Profil_Rel_FormularKS_vyzaduje_zep\")),\n        prop(\"requiresZepFallback\", qi_ks.prop(\"EA_Profil_KS_vyzaduje_zep\")),\n        prop(\"paymentType\", qi_ks.prop(\"KS_Profil_UPVS_typ_spoplatnenia\")),\n        prop(\"paymentCode\", qi_ks.prop(\"KS_Profil_UPVS_kod_spoplatnenia\")),\n        prop(\"publicationState\", qi_ks.prop(\"KS_Profil_UPVS_stav_publikovania\")),\n        prop(\"formName\", qi_form.prop(\"Gen_Profil_nazov\")),\n        prop(\"formDesc\", qi_form.prop(\"Gen_Profil_popis\")),\n        prop(\"formCode\", qi_form.prop(\"EA_Profil_Formular_kod_formulara\")),\n        prop(\"formAllowAttachment\", qi_form.prop(\"EA_Profil_Formular_povolit_prilohy\")),\n        prop(\"zsName\", qi_zs.prop(\"Gen_Profil_nazov\")),\n        prop(\"zsGroupName\", qi_zsgroup.prop(\"Gen_Profil_nazov\")),\n        prop(\"poIco\", qi_po.prop(\"EA_Profil_PO_ico\")),\n        prop(\"attachmentType\", qi_rel_riesi.prop(\"Profil_Rel_FormularKS_typy_priloh\"))\n)\n        .orderBy(qi_ks.prop(\"\\$cmdb_lastModifiedAt\"), OrderDirection.ASC)\n        .orderBy(qi_form.prop(\"\\$cmdb_lastModifiedAt\"), OrderDirection.ASC)\n        .offset(page * perPage)\n        .limit(perPage)\n\ndef data = Neo4j.execute(returnDef).data\n\ndef jsonSlurper = new JsonSlurper()\ndef jsonGenerator = new JsonGenerator.Options().excludeNulls().build()\ndef attachmentTypes = [:] // map of loaded and processed attachment types\n\n// construct json array of attachment types\ndef getAttachmentTypes = { List<String> uids ->\n    if (!uids || uids.empty) {\n        return null\n    }\n\n    def attachments = []\n    for (final def uid in uids) {\n        def type = attachmentTypes[uid]\n        if (type) {\n            attachments.add(type)\n        }\n    }\n\n    return attachments.isEmpty() ? null : jsonGenerator.toJson(attachments)\n}\n\ndef attachmentTypeUids = data\n        .findAll { it.attachmentType }\n        .collect { it.attachmentType as List }\n        .flatten()\n        .unique()\n\nif (!attachmentTypeUids.isEmpty()) {\n    // load and process all attachment types in current dataset at once\n    Neo4j.execute(() -> new ParametrizedQuery(\"match (tp:Priloha_typ) where tp.`\\$cmdb_id` in \\$uids and tp.`\\$cmdb_state` <> \\\"INVALIDATED\\\" return tp\", [uids: attachmentTypeUids])).data.forEach {\n        def type = it.tp as Map\n        def name = type.Gen_Profil_nazov as String\n        def description = type.Gen_Profil_popis as String\n        def allowedMimetypes = type.Profil_typ_prilohy_attachment_format as List\n        if (allowedMimetypes) {\n            allowedMimetypes = allowedMimetypes.collect { edeskMimeTypeEnums[it] }\n        }\n\n        def allowedForm = type.Profil_typ_prilohy_allowedForm as String\n        def isRequired = type.Profil_typ_prilohy_required as Boolean\n//        def isRequired = type.Profil_typ_prilohy_required as Integer\n        def isSignatureRequired = type.Profil_typ_prilohy_signatureRequired as Boolean\n//        def isSignatureRequired = type.Profil_typ_prilohy_signatureRequired as Integer\n        def isMixedAuthorisationAllowed = type.Profil_typ_prilohy_attachment_sign_mass as Boolean\n        def multiplicity = type.Profil_typ_prilohy_attachment_multiplicity as Number\n\n        // Parse the allowedForm JSON string into an object\n        def allowedFormObject\n        try {\n            allowedFormObject = allowedForm ? jsonSlurper.parseText(allowedForm) : null\n        } catch (Exception ignored) {\n            allowedFormObject = jsonSlurper.parseText(\"{\\\"error\\\":\\\"failed to parse allowed form json\\\"}\")\n        }\n\n        attachmentTypes.put(type.$cmdb_id, [\n                name                       : name,\n                description                : description,\n                allowedMimetypes           : allowedMimetypes,\n                allowedForm                : allowedFormObject,\n                isRequired                 : Boolean.TRUE == isRequired,\n                isSignatureRequired        : Boolean.TRUE == isSignatureRequired,\n                isMixedAuthorisationAllowed: Boolean.TRUE == isMixedAuthorisationAllowed,\n                multiplicity               : multiplicity as String\n        ])\n    }\n}\n\ndef reportDef = new Report(reportHeaders)\ndata.collect(reportDef.getRows(), {\n    new Report.Row([\n            it.code, // KS.Gen_Profil_kod_metais\n            it.name, // KS.Gen_Profil_nazov\n            it.description, // KS.Gen_Profil_popis\n            ksTypeEnums[it.ksType], // KS.EA_Profil_KS_typ_ks\n            it.url, // KS.KS_Profil_UPVS_url\n            it.urlInfo, // KS.KS_Profil_UPVS_url_info\n            formatDate(it.validFrom as Long), // KS.KS_Profil_UPVS_od\n            formatDate(it.validTo as Long), // KS.KS_Profil_UPVS_do\n            null, // Kategória služby - NEMAME\n            it.formName, // Formular.Gen_Profil_nazov\n            it.formDesc, // Formular.Gen_Profil_popis\n            it.formCode, // Formular.EA_Profil_Formular_kod_formulara\n            it.formName != null ? \"Hlavný formulár\" : null,\n            it.formAllowAttachment as String, // Formular.EA_Profil_Formular_povolit_prilohy\n            getAttachmentTypes(it.attachmentType as List),\n            (it.requiresZep ?: it.requiresZepFallback) as String, // KS.EA_Profil_KS_vyzaduje_zep\n            paymentTypeEnums[it.paymentType], // KS.KS_Profil_UPVS_typ_spoplatnenia\n            it.paymentCode, // KS.KS_Profil_UPVS_kod_spoplatnenia\n            it.zsGroupName, // OkruhZS.Gen_Profil_nazov\n            it.zsName, // ZS.Gen_Profil_nazov\n            it.poIco, // PO.EA_Profil_PO_ico prefix\n            publStateEnums[it.publicationState], // KS.KS_Profil_UPVS_stav_publikovania\n    ])\n})\n\ndef totalCount = Neo4j.execute(query.returns(count(\"totalCount\", qi_ks))).data.first().totalCount as int\ndef result = new ReportResult(\"TABLE\", reportDef, totalCount)\nresult.page = page\nresult.perPage = perPage\nreturn result\n\",\n  \"parameters\": {\n        \"code\": \"\",\n        \"dateFrom\": \"\",\n        \"dateTo\": \"\",\n        \"ico\": \"\",\n        \"state\": \"\"\n  }\n}